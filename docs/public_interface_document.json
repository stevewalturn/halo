{
  "package_name": "com.steve_os.halo",
  "project_description": "The Halo app is a Flutter project that follows the Stacked architecture, featuring routing, dependency injection, and dialog/bottom sheet management. The app allows users to interact with a simple counter, view information in a dialog, and see a notice in a bottom sheet. It also includes features for tracking screen views and launching communication channels like WhatsApp and email.",
  "architecture_overview": "The Halo app follows the Stacked architecture, which separates the application into distinct layers: app setup, features, UI components, and utilities. This separation of concerns promotes modularity, testability, and maintainability. The app uses Stacked for state management, routing, and dependency injection, providing a structured approach to managing the application's logic and data flow.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file is responsible for managing the application's localization and internationalization (i18n) functionality. It serves as a central hub for importing and exporting the necessary components to support multiple languages within the Flutter app.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the necessary configuration options for connecting to the Firebase backend in the development environment of the Flutter application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "cloud_firestore"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the custom dialogs used throughout the application. It provides a centralized way to register and access these dialogs, ensuring consistent UI and behavior across the app.",
      "class_diagram": "@startuml\n\nclass DialogService {\n  +registerCustomDialogBuilders()\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n}\n\nDialogService *-- InfoAlertDialog\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers the custom dialog builders with the DialogService, making them available for use throughout the application.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "halo/app/app.locator.dart",
        "halo/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the bottom sheet UI for the application. It defines the different types of bottom sheets that can be displayed and provides a central location for registering the builders for each bottom sheet type.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\ninterface SheetBuilder {\n  +build(context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet implements SheetBuilder {\n  +build(context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService -> BottomSheetType : uses\nBottomSheetService -> SheetBuilder : uses\nNoticeSheet .up.> SheetBuilder : implements\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method is responsible for setting up the custom bottom sheet builders for the application. It registers the builders for each bottom sheet type, allowing the BottomSheetService to display the appropriate bottom sheet when requested.",
          "parameters": [
            "void"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "halo/app/app.locator.dart",
        "halo/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This file is responsible for managing the localization and internationalization (i18n) support in the application. It defines the list of supported locales and the localization delegates, which are essential for providing a multilingual user experience.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "This getter function returns the list of localization delegates, which are responsible for loading and providing the app's localized strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "This getter function returns the list of supported locales, which defines the languages that the app can be displayed in.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an enum called `Flavor` that represents the different flavors or environments of the application, specifically `production` and `development`.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the Halo application. It sets up the necessary dependencies and configurations to launch the main application view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app with the necessary configuration and the `AppView` as the root widget.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:halo/main/bootstrap.dart",
        "package:halo/models/enums/flavor.dart",
        "package:halo/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This file is responsible for bootstrapping the development version of the Halo application. It sets up the necessary configuration and initializes the main app view to be displayed.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the bootstrap function, which sets up the development environment and starts the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:halo/main/bootstrap.dart",
        "package:halo/models/enums/flavor.dart",
        "package:halo/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "The `bootstrap.dart` file is responsible for bootstrapping the Flutter application by setting up the necessary dependencies, configuring the app's environment, and starting the app's execution. This file serves as the entry point for the application, ensuring a consistent and reliable launch process.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The `bootstrap` function is the main entry point of the application. It sets up the necessary environment, configures the app's locator, dialog UI, and bottom sheet UI, and then runs the app's main build function.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:halo/app/app.bottomsheets.dart",
        "package:halo/app/app.dialogs.dart",
        "package:halo/app/app.locator.dart",
        "package:halo/models/enums/flavor.dart",
        "package:halo/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService is a wrapper class that encapsulates the implementation of an analytics service, providing a consistent interface for interacting with analytics functionality across the application.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n\nAnalyticService ..|> InitializableDependency\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is a view model that encapsulates the logic and state related to the notice bottom sheet UI component in the application. It extends the BaseViewModel class from the stacked package, which provides a standard architecture for managing view model state and lifecycle.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n}\nNoticeSheetModel -up-|> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for rendering a bottom sheet UI component that displays a notice or alert to the user. It is part of the Halo application's UI layer and is used to present important information or updates to the user in a clear and concise manner.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request, super.key})\n  +Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  +NoticeSheetModel viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the NoticeSheet, which includes the title, description, and any additional UI elements.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which handles the business logic and data for the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "halo/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "halo/ui/common/app_colors.dart",
        "halo/ui/common/ui_helpers.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and configuring the dependency injection and service locator for the application. It is a crucial part of the application's architecture, as it ensures that dependencies are properly managed and that services are easily accessible throughout the codebase.",
      "class_diagram": "@startuml\nclass StackedLocator {\n  +static instance: StackedLocator\n  +registerEnvironment(environment: String, environmentFilter: EnvironmentFilter)\n  +registerLazySingleton(service: dynamic)\n}\n\nclass BottomSheetService\nclass DialogService\nclass NavigationService\n\nStackedLocator *-- BottomSheetService\nStackedLocator *-- DialogService\nStackedLocator *-- NavigationService\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for setting up the dependency injection and service locator. It registers the environment and dependencies with the StackedLocator.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the Flutter application by observing the navigation events. It integrates with the AnalyticService to report the screen views, which is essential for app analytics and usage monitoring.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + didPush(Route, Route?)\n  + didReplace(newRoute: Route, oldRoute: Route?)\n  + didPop(Route, Route?)\n  - _trackScreenView(Route)\n}\n\nclass AnalyticService {\n  + trackScreen(String)\n}\n\nScreenObserver -> AnalyticService: tracks screen views using\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Callback method that is invoked when a new route is pushed onto the navigator.",
          "parameters": [
            "Route<dynamic>",
            "Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Callback method that is invoked when a route is replaced by another route.",
          "parameters": [
            "newRoute: Route<dynamic>?",
            "oldRoute: Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Callback method that is invoked when a route is popped from the navigator.",
          "parameters": [
            "Route<dynamic>",
            "Route<dynamic>?"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Internal method that extracts the screen name from the route and reports it to the AnalyticService.",
          "parameters": [
            "Route<dynamic>"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:halo/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This file contains an extension on the `BuildContext` class that provides an easy way to access the current `AppLocalizations` instance. It solves the problem of repeatedly calling `AppLocalizations.of(context)` throughout the codebase by providing a convenient shorthand.",
      "class_diagram": "@startuml\nclass BuildContext {\n}\n\nclass AppLocalizations {\n  + of(BuildContext context): AppLocalizations\n}\n\nBuildContext <|-- LocalizationsX\nLocalizationsX {\n  + get localizations: AppLocalizations\n}\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current `AppLocalizations` instance associated with the `BuildContext`.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This file defines a view model for an information alert dialog in a Flutter application. It provides the core functionality and state management for displaying an informative message to the user.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n  +InfoAlertDialogModel()\n}\nclass BaseViewModel {\n}\nInfoAlertDialogModel -up-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "Constructor for the InfoAlertDialogModel class. It initializes the base view model.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of utility functions and constants that help with building responsive and consistent user interfaces in a Flutter application. It serves as a centralized location for common UI-related functionality, making it easier to maintain and apply consistent styling across the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "screenWidth",
          "description": "Returns the current screen width in the given BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the current screen height in the given BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the screen height, optionally offsetting and capping the value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Calculates a fraction of the screen width, optionally offsetting and capping the value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive font size for small text based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive font size for medium text based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive font size for large text based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive font size for extra-large text based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive font size for massive text based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width, with optional maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "dart:math"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the app-level view in a Flutter application. It serves as the ViewModel component in the MVVM (Model-View-ViewModel) architectural pattern, handling the business logic and data transformations required by the app's UI.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the Flutter application. It provides the core functionality and business value for the home screen, including a simple counter feature and the ability to display a dialog and bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _counter: int\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n\n  + get counterLabel(): String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "get counterLabel",
          "description": "Returns a formatted string representing the current value of the counter.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the updated value.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description, using the DialogService.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description, using the BottomSheetService.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:halo/app/app.bottomsheets.dart",
        "package:halo/app/app.dialogs.dart",
        "package:halo/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options for the production environment of the application. It defines the necessary credentials and settings required to connect and interact with the Firebase services in the production context.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "firebase_database",
        "firebase_storage"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The `StartupViewModel` class is responsible for handling the initial startup logic of the application. It is a ViewModel class that is used in conjunction with the `StartupView` UI component to manage the application's startup sequence.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  -_navigationService: NavigationService\n  +runStartupLogic(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for executing the startup logic of the application. It delays for 3 seconds to simulate some initial processing, and then navigates the user to the home view of the application.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:halo/app/app.locator.dart",
        "package:halo/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` is the main entry point of the Flutter application. It is responsible for setting up the overall app structure, including the navigation, localization, and global gesture handling.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n\nAppViewModel <-- _App\nStackedRouter <-- _App\nStackedService <-- _App\nScreenObserver <-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main app widget, which sets up the app's navigation, localization, and global gesture handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:halo/app/app.router.dart",
        "package:halo/l10n/supported_locales.dart",
        "package:halo/observer/screen_observer.dart",
        "package:halo/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file is responsible for defining a set of constants that are used throughout the application. These constants encapsulate various pieces of configuration, default values, and static content that are essential for the app's functionality.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with dates and timestamps in the application. It serves as a centralized location for date-related functionality, ensuring consistent date handling across the codebase.",
      "class_diagram": "@startuml\nclass DateUtil {\n  +static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (which can be a Timestamp, String, or DateTime) into a DateTime object. This is useful for handling date-related data from various sources, such as Firebase Firestore.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The ContactUtil class provides utility functions for launching WhatsApp and email apps from the Flutter application. It handles the platform-specific logic to open the appropriate communication channels based on the user's device.",
      "class_diagram": "@startuml\n  class ContactUtil {\n    + static Future<void> launchWhatsApp(String phone, {String text = ''})\n    + static Future<void> launchEmail(String email)\n  }\n  @enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp app or website to send a message to the specified phone number with an optional text.",
          "parameters": [
            "String phone",
            "String text = ''"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email app to compose an email to the specified email address.",
          "parameters": [
            "String email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "The `APIException` class is a custom exception type used to handle and propagate errors that occur in the API service layer of the application. This exception provides a standardized way to communicate API-related errors to other parts of the application.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  -dynamic message\n  +String toString()\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor for the `APIException` class. It takes an optional `message` parameter, which can be of any dynamic type, to store additional information about the exception.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "The `toString` method overrides the default `toString` implementation to provide a string representation of the `APIException` instance, including the type of the exception and the associated `message`.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The HomeView class is responsible for rendering the main user interface of the home screen in the Flutter application. It provides a visual representation of the application's core functionality, including incrementing a counter and displaying a dialog or bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including the counter, dialog, and bottom sheet buttons.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Initializes the HomeViewModel, which provides the core business logic for the home screen.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:halo/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a color extension that allows for easy conversion of hexadecimal color strings to Color objects and integer values. This is a common utility used in Flutter applications to simplify working with colors.",
      "class_diagram": "@startuml\nclass HexColor {\n  + static Color fromHex(String hexColorString)\n  + static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (with or without a leading '#') to a Color object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (with or without a leading '#') to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This Dart file is responsible for managing the current application flavor (development, production, etc.) and providing utility methods to check the active flavor.",
      "class_diagram": "@startuml\nclass Flavors {\n  + factory Flavors()\n  + static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Factory constructor that returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "flavor",
          "description": "A static property that stores the current application flavor.",
          "parameters": null,
          "return_type": "Flavor?"
        },
        {
          "name": "isDev",
          "description": "A static getter that returns true if the current flavor is development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "A static getter that returns true if the current flavor is production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:halo/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is a utility for working with JSON data in Dart/Flutter applications. It provides a set of static methods to handle common JSON-related tasks, such as formatting JSON maps, safely converting JSON to Dart objects, and parsing lists of JSON maps.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a dynamic JSON map to a strongly-typed Map<String, dynamic>. This is useful for ensuring consistent key types when working with JSON data.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to a Dart object of type T, using a provided factory function. If the JSON is null or not a map, it returns null.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a list of dynamic JSON maps to a list of Dart objects of type T, using a provided factory function. This is useful for parsing JSON arrays of objects.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location for managing the app's color palette, making it easier to maintain a consistent visual design across different screens and components.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file defines the navigation routes and handling for the application. It is responsible for managing the application's navigation flow, allowing seamless transitions between different views or screens.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:halo/ui/views/home/home_view.dart",
        "package:halo/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for rendering the initial startup screen of the application. It displays a centered layout with the app's logo and a loading indicator, while waiting for the `StartupViewModel` to complete its initialization logic.",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder()\n  +viewModelBuilder()\n  +onViewModelReady()\n}\nclass StartupViewModel {\n  +runStartupLogic()\n}\nStartupView *-- StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Constructs an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers the execution of the `runStartupLogic()` method on the `StartupViewModel` after the initial frame has been rendered.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "halo/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "Auto-generated entry for lib/ui/dialogs/info_alert/info_alert_dialog.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The Halo app uses the Stacked architecture for state management. ViewModels, such as HomeViewModel and StartupViewModel, handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, allowing the ViewModels to access necessary services and repositories. Changes in the ViewModels are then reflected in the UI, providing a clean separation of concerns between the presentation and business logic layers.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router defined in app.router.dart. The main.dart file sets up the app and runs the AppView, which initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. User interactions within the HomeView trigger updates in the HomeViewModel, which can then display dialogs or bottom sheets as needed."
}